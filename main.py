from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import CallbackQuery
from database import database as db
from kboard import keyboard as kb
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from setting import TOKEN


bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


async def on_startup(_):
    await db.database_info()
    await db.information_user()


# –ö–ª–∞—Å—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¢–æ–≤–∞—Ä–æ–≤.
class ProductAdd(StatesGroup):
    name = State()
    description = State()
    price = State()
    size = State()
    color = State()
    photo = State()


# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ó–∞–∫–∞–∑–æ–≤.
class Order(StatesGroup):
    name = State()
    city = State()
    color = State()
    size = State()
    delivery = State()


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–∏
def back():
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    @dp.callback_query_handler(lambda call: call.data == 'back')
    async def button_back(call: types.CallbackQuery):
        await call.bot.edit_message_text(message_id=call.message.message_id,
                                         chat_id=call.message.chat.id,
                                         text="MeduzaShop - –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –¥–ª—è —Ç–µ–±—è –∏ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Ö, "
                                              "–∫—Ç–æ –ª—é–±–∏—Ç —Ö–æ—Ä–æ—à–æ –≤—ã–≥–ª—è–¥–µ—Ç—å.",
                                         reply_markup=kb.keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):

    if message.chat.type != 'private':
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ú–∞–≥–∞–∑–∏–Ω MeduzaShop. –î–ª—è —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /shop.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shop
@dp.message_handler(commands=['shop'])
async def shop(message: types.Message):

    if message.chat.type == 'private':
        await message.answer("MeduzaShop - –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –¥–ª—è —Ç–µ–±—è –∏ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Ö, –∫—Ç–æ –ª—é–±–∏—Ç —Ö–æ—Ä–æ—à–æ –≤—ã–≥–ª—è–¥–µ—Ç—å.",
                             reply_markup=kb.keyboard)
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
@dp.callback_query_handler(lambda call: call.data == 'information')
async def button_info(call: types.CallbackQuery):
    await bot.edit_message_text(message_id=call.message.message_id,
                                chat_id=call.message.chat.id,
                                text="<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å</b>\n\n"
                                     "üìç –ú–∞–≥–∞–∑–∏–Ω —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ –≥.–°–≤–µ—Ç–ª–æ–≥—Ä–∞–¥.\n"
                                     "üëü –£ –Ω–∞—Å –±–æ–ª—å—à–æ–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∫—Ä–æ—Å—Å–æ–≤–æ–∫, –∞ —Ç–∞–∫–∂–µ –∏–º–µ–µ—Ç—Å—è "
                                     "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–¥ –∑–∞–∫–∞–∑.\n\n"
                                     "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º –≤ <b>WhatsApp</b>:\n"
                                     "+7 918 769 02 10; +7 918 872 18 36",
                                reply_markup=kb.back_keyboard,
                                parse_mode='html')
    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π –∫–ª–∞–≤–∏—à–∏
    back()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ –°–≤—è–∑—å
@dp.callback_query_handler(lambda call: call.data == 'call')
async def call_button(call: types.CallbackQuery):
    await bot.edit_message_text(message_id=call.message.message_id,
                                chat_id=call.message.chat.id,
                                text="<b>WhatsApp</b>: +7 918 769 02 10; +7 918 872 18 36\n"
                                     "<b>Instagram</b>: meduza__.club\n"
                                     "<b>Telegram</b>: @Meduzaclub777",
                                reply_markup=kb.back_keyboard,
                                parse_mode='html')

    back()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ –î–æ—Å—Ç–∞–≤–∫–∞/–û–ø–ª–∞—Ç–∞
@dp.callback_query_handler(lambda call: call.data == 'order')
async def order_button(call: types.CallbackQuery):
    await bot.edit_message_text(message_id=call.message.message_id,
                                chat_id=call.message.chat.id,
                                text="<b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞</b> –∫—É—Ä—å–µ—Ä–æ–º –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ "
                                     "–≥.–°–≤–µ—Ç–ª–æ–≥—Ä–∞–¥ –∏ –°—Ç–∞–≤—Ä–æ–ø–æ–ª—å.\n\n"
                                     "–í –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è <b>–ü–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞</b> —Å –ø–æ–º–æ—â—å—é:\n\n"
                                     "-–ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏\n"
                                     "-–°–î–≠–ö\n"
                                     "-–†–µ–π—Å–æ–≤—ã—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤\n\n"
                                     "<i>–ü—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –≤–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –æ–±–∑–æ—Ä –Ω–∞ —Ç–æ–≤–∞—Ä</i>.",
                                reply_markup=kb.back_keyboard,
                                parse_mode='html')
    back()


@dp.message_handler(commands=['apanel'])
async def apanel(message: types.Message):
    username = message.from_user.username

    if message.chat.type == 'private' and (username == 'diditsa'):
        await bot.send_message(message.chat.id,
                               "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω-–ü–∞–Ω–µ–ª—å.",
                               reply_markup=kb.setting_keyboard)
    else:
        await bot.send_message(message.chat.id,
                               "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î.
@dp.callback_query_handler(lambda call: call.data == 'add')
async def add_button(call: types.CallbackQuery):
    await ProductAdd.name.set()
    await call.bot.edit_message_text(message_id=call.message.message_id,
                                     chat_id=call.message.chat.id,
                                     text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.",
                                     reply_markup=None)


@dp.message_handler(state=ProductAdd.name)
async def add_product_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
    await ProductAdd.next()


@dp.message_handler(state=ProductAdd.description)
async def add_product_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.")
    await ProductAdd.next()


@dp.message_handler(state=ProductAdd.price)
async def add_product_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = message.text
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —á–µ—Ä–µ–∑ /')
    await ProductAdd.next()


@dp.message_handler(state=ProductAdd.size)
async def add_product_size(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['size'] = message.text
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞.')
    await ProductAdd.next()


@dp.message_handler(state=ProductAdd.color)
async def add_product_color(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['color'] = message.text
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω–µ—á–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞.')
    await ProductAdd.next()


@dp.message_handler(state=ProductAdd.photo)
async def add_product_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.text
    await db.insert_product(state)
    await message.answer('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.')
    await state.finish()


# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ë–î
@dp.message_handler(commands=['delete_product'])
async def delete_product(message: types.Message):

    # –ò–î –ø—Ä–æ–¥—É–∫—Ç–∞
    id_product = db.cursor.execute("SELECT id FROM product").fetchall()

    # –°–ø–∏—Å–æ–∫ —Å–æ –≤—Å–µ–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    all_product_id = []

    # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö ID –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ö –≤ —Å–ø–∏—Å–æ–∫.
    for product in id_product:
        return all_product_id.append(product[0])

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏.
    message_split = message.text.split()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è.
    if len(message_split) < 2:
        await message.answer("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞.\n\n"
                             "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ - /delete_product <ID>")
        return

    try:
        send_id_product = int(message_split[1])

        # –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ ID —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.
        if send_id_product not in all_product_id:
            await message.answer(f"–¢–æ–≤–∞—Ä–∞ —Å ID {send_id_product} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π ID –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.
        if ((message.chat.type == 'private') and (send_id_product in all_product_id) and
                (message.from_user.username == 'diditsa')):

            db.cursor.execute("DELETE FROM product WHERE id = ?", (send_id_product,))
            db.conn.commit()
            await message.answer("–¢–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª–µ–Ω.")

        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–æ–≤.")

    except ValueError or TypeError:

        if ValueError:
            await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞.')
        elif TypeError:
            await message.answer(f'–¢–æ–≤–∞—Ä–∞ —Å ID: {message_split[1]} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–∞—Ö
@dp.callback_query_handler(lambda call: call.data == 'all_product')
async def all_product(call: CallbackQuery):

    # –í—ã–±–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ë–î –ø–æ ID
    current_product = db.cursor.execute("SELECT * FROM product WHERE id = ?", (db.current_product_id,)).fetchone()

    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –µ—Å—Ç—å.
    if current_product:
        await bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    text=f"ID —Ç–æ–≤–∞—Ä–∞: {current_product[0]}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {current_product[1]}\n"
                                         f"–û–ø–∏—Å–∞–Ω–∏–µ: {current_product[2]}", reply_markup=kb.next_keyboard)
    else:
        await bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    text="–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö.",
                                    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –î–∞–ª–µ–µ.
@dp.callback_query_handler(lambda call: call.data == 'next_product')
async def next_product(call: types.CallbackQuery):
    db.current_product_id += 1
    current_product = db.cursor.execute("SELECT * FROM product WHERE id = ?", (db.current_product_id,)).fetchone()

    if current_product:
        await bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    text=f"ID —Ç–æ–≤–∞—Ä–∞: {current_product[0]}\n"
                                         f"–ù–∞–∑–≤–∞–Ω–∏–µ: {current_product[1]}\n"
                                         f"–û–ø–∏—Å–∞–Ω–∏–µ: {current_product[2]}", reply_markup=kb.next_keyboard)
    else:
        await bot.answer_callback_query(callback_query_id=call.id, text="–¢–æ–≤–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!")
        db.current_product_id -= 1


@dp.callback_query_handler(lambda call: call.data == 'back_button')
async def back_button(call: types.CallbackQuery):
    db.current_product_id -= 1
    current_product = db.cursor.execute("SELECT * FROM product WHERE id = ?", (db.current_product_id,)).fetchone()

    if current_product:
        await bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    text=f"ID —Ç–æ–≤–∞—Ä–∞: {current_product[0]}\n"
                                         f"–ù–∞–∑–≤–∞–Ω–∏–µ: {current_product[1]}\n"
                                         f"–û–ø–∏—Å–∞–Ω–∏–µ: {current_product[2]}", reply_markup=kb.next_keyboard)
    else:
        await bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω-–ü–∞–Ω–µ–ª—å",
                                    reply_markup=kb.setting_keyboard)
        db.current_product_id = 1


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ö–∞—Ç–∞–ª–æ–≥.
@dp.callback_query_handler(lambda call: call.data == 'catalog')
async def catalog_button(call: types.CallbackQuery):
    current_product = db.cursor.execute("SELECT * FROM product WHERE id = ?", (db.current_product_id,)).fetchone()

    if current_product:
        await bot.send_photo(call.message.chat.id,
                             f"{current_product[4]}",
                             f"<b>{current_product[1]}</b>\n\n"
                             f"<i>{current_product[2]}</i>\n\n"
                             f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>: {current_product[3]} —Ä—É–±–ª–µ–π.\n"
                             f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã</b>: {current_product[5]}\n"
                             f"<b>–¶–≤–µ—Ç</b>: {current_product[6]}\n\n"
                             f"<i>–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ WhatsApp</i>:\n"
                             f"+7 918 769 02 10; +7 918 872 18 36\n\n"
                             f"<i>ID —Ç–æ–≤–∞—Ä–∞</i>: {current_product[0]}",
                             parse_mode='html', reply_markup=kb.order_keyboard)
    else:
        await call.bot.answer_callback_query(callback_query_id=call.id, text='–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.')


@dp.callback_query_handler(lambda call: call.data == 'next_order_keyboard')
async def next_order_keyboard(call: types.CallbackQuery):
    db.current_product_id += 1
    current_product = db.cursor.execute("SELECT * FROM product WHERE id = ?", (db.current_product_id,)).fetchone()

    if current_product:
        await bot.edit_message_media(chat_id=call.message.chat.id,
                                     message_id=call.message.message_id,
                                     media=types.InputMediaPhoto(media=current_product[4]))

        await bot.edit_message_caption(chat_id=call.message.chat.id,
                                       message_id=call.message.message_id,
                                       caption=f"<b>{current_product[1]}</b>\n\n"
                                               f"<i>{current_product[2]}</i>\n\n"
                                               f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>: {current_product[3]} —Ä—É–±–ª–µ–π.\n"
                                               f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã</b>: {current_product[5]}\n"
                                               f"<b>–¶–≤–µ—Ç</b>: {current_product[6]}\n\n"
                                               f"<i>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–æ–≤–∞—Ä—É, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ WhatsApp</i>:\n"
                                               f"+7 918 769 02 10; +7 918 872 18 36\n"
                                               f"<i>ID —Ç–æ–≤–∞—Ä–∞</i>: {current_product[0]}",
                                       parse_mode='html',
                                       reply_markup=kb.order_keyboard)
    else:
        await bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã.")
        db.current_product_id -= 1


@dp.callback_query_handler(lambda call: call.data == "back_order_keyboard")
async def back_order_keyboard(call: types.CallbackQuery):
    db.current_product_id -= 1
    current_product = db.cursor.execute("SELECT * FROM product WHERE id = ?", (db.current_product_id,)).fetchone()

    if current_product:
        await bot.edit_message_media(chat_id=call.message.chat.id,
                                     message_id=call.message.message_id,
                                     media=types.InputMediaPhoto(media=current_product[4]))

        await bot.edit_message_caption(chat_id=call.message.chat.id,
                                       message_id=call.message.message_id,
                                       caption=f"<b>{current_product[1]}</b>\n\n"
                                               f"<i>{current_product[2]}</i>\n\n"
                                               f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>: {current_product[3]} —Ä—É–±–ª–µ–π.\n"
                                               f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã</b>: {current_product[5]}\n"
                                               f"<b>–¶–≤–µ—Ç</b>: {current_product[6]}\n\n"
                                               f"<i>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–æ–≤–∞—Ä—É, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ WhatsApp</i>:\n"
                                               f"+7 918 769 02 10; +7 918 872 18 36\n\n"
                                               f"<i>ID —Ç–æ–≤–∞—Ä–∞</i>: {current_product[0]}",
                                       parse_mode='html',
                                       reply_markup=kb.order_keyboard)
    else:
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        db.current_product_id = 1


# –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞.
@dp.callback_query_handler(lambda call: call.data == "buy_order_keyboard")
async def buy_order_keyboard(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± ID —Ç–æ–≤–∞—Ä–∞
    product_id = db.current_product_id

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –ë–î
    product = db.cursor.execute("SELECT * FROM product WHERE id = ?", (product_id,)).fetchone()

    await bot.send_message(call.message.chat.id,
                           "<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ  –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ, "
                           "–ø–æ—Å–ª–µ —á–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é.</b>\n\n"
                           f"<b>ID —Ç–æ–≤–∞—Ä–∞</b>: <i>{product_id}</i>\n"
                           f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: <i>{product[1]}</i>\n"
                           f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>: <i>{product[3]}</i>\n"
                           f"<b>–¶–≤–µ—Ç</b>: <i>{product[6]}</i>\n"
                           f"<b>–†–∞–∑–º–µ—Ä—ã</b>: <i>{product[5]}</i>",
                           parse_mode='html',
                           reply_markup=kb.next_order_keyboard)


@dp.callback_query_handler(lambda call: call.data == 'next_buy_product')
async def next_buy_product(call: CallbackQuery):
    await Order.name.set()
    await bot.send_message(chat_id=call.message.chat.id,
                           text="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")


@dp.message_handler(state=Order.name)
async def user_add_name(message: types.Message, state: FSMContext):
    async with state.proxy() as info:
        info['name'] = message.text
        info['id'] = message.from_user.id
        info['tg_name'] = message.from_user.username
    await bot.send_message(chat_id=message.chat.id,
                           text="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥.")
    await Order.next()


@dp.message_handler(state=Order.city)
async def user_add_city(message: types.Message, state: FSMContext):
    async with state.proxy() as info:
        info['city'] = message.text
    await bot.send_message(chat_id=message.chat.id,
                           text="–£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç –∫—Ä–æ—Å—Å–æ–≤–æ–∫.")
    await Order.next()


@dp.message_handler(state=Order.color)
async def user_add_color(message: types.Message, state: FSMContext):
    async with state.proxy() as info:
        info['color'] = message.text
    await bot.send_message(chat_id=message.chat.id,
                           text="–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫—Ä–æ—Å—Å–æ–≤–æ–∫.")
    await Order.next()


@dp.message_handler(state=Order.size)
async def user_add_size(message: types.Message, state: FSMContext):
    async with state.proxy() as info:
        info['size'] = message.text
    await bot.send_message(chat_id=message.chat.id,
                           text="–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ - –ö—É—Ä—å–µ—Ä/–ü–æ—á—Ç–∞/–°–î–≠–ö/–ê–≤—Ç–æ–±—É—Å—ã")
    await Order.next()


@dp.message_handler(state=Order.delivery)
async def user_add_delivery(message: types.Message, state: FSMContext):
    async with state.proxy() as info:
        info['delivery'] = message.text
    await bot.send_message(chat_id=message.chat.id,
                           text="–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –ø—Ä–æ–¥–∞–≤–µ—Ü –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è "
                                "–¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.",
                           reply_markup=kb.back_keyboard)
    await db.user_order(state)
    await state.finish()
    back()


# –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ.
@dp.message_handler(commands=['delete_order'])
async def user_delete_order(message: types.Message):
    user_id_in_database = []
    user_id_in_information = db.cursor.execute("SELECT USER_ID FROM information").fetchall()

    for user_id in user_id_in_information:
        user_id_in_database.append(user_id[0])

    print(user_id_in_database)

    message_split = message.text.split()

    if len(message_split) < 2:
        await message.answer("–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        user_information = int(message_split[1])
        if user_information not in user_id_in_database:
            await message.answer(f"–ó–∞–∫–∞–∑–∞ —Å ID {user_information} –Ω–µ—Ç –≤ –ë–î.")
        else:
            await message.answer(f"–ó–∞–∫–∞–∑ —Å ID {user_information} –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –ë–î")
            db.cursor.execute("DELETE FROM information WHERE USER_ID = ?", (user_information,))
            db.conn.commit()

    except ValueError:
        await message.answer(f"ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä.")


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö
@dp.callback_query_handler(lambda call: call.data == 'all_order')
async def all_order(call: CallbackQuery):
    order = db.cursor.execute("SELECT * FROM information WHERE USER = ?", (db.current_user,)).fetchone()

    if order:
        await bot.send_message(call.message.chat.id,
                               f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö</b>\n\n"
                               f"<b>ID –∑–∞–∫–∞–∑–∞</b> - {order[7]}\n"
                               f"<b>–ò–º—è</b> - {order[1]}\n"
                               f"<b>–ì–æ—Ä–æ–¥</b> - {order[2]}\n"
                               f"<b>ID —Ç–æ–≤–∞—Ä–∞</b> - {order[3]}\n"
                               f"<b>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏</b> - {order[4]}\n"
                               f"<b>–†–∞–∑–º–µ—Ä</b> - {order[5]}\n"
                               f"<b>–¶–≤–µ—Ç</b> - {order[6]}\n"
                               f"<b>–¢–µ–ª–µ–≥—Ä–∞–º</b> - @{order[8]}\n\n"
                               f"<i>–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î - –∑–Ω–∞—á–∏—Ç –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É "
                               f"–∏ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞, –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–¥—Ä–µ—Å –∏ —Ç.–ø. –ö–æ–≥–¥–∞ —Å–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - "
                               f"—É–¥–∞–ª—è–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</i>.",
                               parse_mode='html', reply_markup=kb.back_order_keyboard)
    else:
        await call.bot.answer_callback_query(callback_query_id=call.id, text="–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")


@dp.callback_query_handler(lambda call: call.data == 'user_info_order_next')
async def user_info_order_next(call: CallbackQuery):
    db.current_user += 1

    order = db.cursor.execute("SELECT * FROM information WHERE USER = ?", (db.current_user,)).fetchone()

    if order:
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö</b>\n\n"
                                         f"<b>ID –∑–∞–∫–∞–∑–∞</b> - {order[7]}\n"
                                         f"<b>–ò–º—è</b> - {order[1]}\n"
                                         f"<b>–ì–æ—Ä–æ–¥</b> - {order[2]}\n"
                                         f"<b>ID —Ç–æ–≤–∞—Ä–∞</b> - {order[3]}\n"
                                         f"<b>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏</b> - {order[4]}\n"
                                         f"<b>–†–∞–∑–º–µ—Ä</b> - {order[5]}\n"
                                         f"<b>–¶–≤–µ—Ç</b> - {order[6]}\n"
                                         f"<b>–¢–µ–ª–µ–≥—Ä–∞–º</b> - @{order[8]}\n\n"
                                         f"<i>–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î - –∑–Ω–∞—á–∏—Ç –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É "
                                         f"–∏ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞, –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–¥—Ä–µ—Å –∏ —Ç.–ø. –ö–æ–≥–¥–∞ —Å–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ "
                                         f"–∑–∞–≤–µ—Ä—à–µ–Ω–∞ - "
                                         f"—É–¥–∞–ª—è–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</i>.",
                                    parse_mode='html', reply_markup=kb.back_order_keyboard)
    else:
        db.current_user = 1
        await call.bot.answer_callback_query(callback_query_id=call.id, text="–ë–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")


@dp.callback_query_handler(lambda call: call.data == 'user_info_order_back')
async def user_info_order_back(call: CallbackQuery):
    db.current_user -= 1
    order = db.cursor.execute("SELECT * FROM information WHERE USER = ?", (db.current_user,)).fetchone()

    if order:
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö</b>\n\n"
                                         f"<b>ID –∑–∞–∫–∞–∑–∞</b> - {order[7]}\n"
                                         f"<b>–ò–º—è</b> - {order[1]}\n"
                                         f"<b>–ì–æ—Ä–æ–¥</b> - {order[2]}\n"
                                         f"<b>ID —Ç–æ–≤–∞—Ä–∞</b> - {order[3]}\n"
                                         f"<b>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏</b> - {order[4]}\n"
                                         f"<b>–†–∞–∑–º–µ—Ä</b> - {order[5]}\n"
                                         f"<b>–¶–≤–µ—Ç</b> - {order[6]}\n"
                                         f"<b>–¢–µ–ª–µ–≥—Ä–∞–º</b> - @{order[8]}\n\n"
                                         f"<i>–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î - –∑–Ω–∞—á–∏—Ç –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É "
                                         f"–∏ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞, –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–¥—Ä–µ—Å –∏ —Ç.–ø. –ö–æ–≥–¥–∞ —Å–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ "
                                         f"–∑–∞–≤–µ—Ä—à–µ–Ω–∞ - "
                                         f"—É–¥–∞–ª—è–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</i>.",
                                    parse_mode='html', reply_markup=kb.back_order_keyboard)
    else:
        db.current_user = 1
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
